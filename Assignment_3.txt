In the undo_redo_system file, I implemented a stack. The undo/redo system is best implemented with stacks because stacks follow a LIFO access order. The most recent action should be the first one undone. By pushing each action onto the undo stack, we can easily retrieve the last action with a pop. When an undo occurs, that action is moved to the redo stack, allowing it to be reapplied in the correct order if the user chooses “Redo.” Pinting displays either the undo or redo list in entirety

In the help_desk_queue file, I implemented a queue. The help desk system is better uses a queue because customer requests should be handled in the FIFO order. The first customer to join the queue should be the first one served. With enqueue, customers are added to the rear, and with dequeue, customers are served from the front. Peeking at the queue’s front shows the queue without altering the order. Printing the queue displays the list of waiting customers in its entirety.
